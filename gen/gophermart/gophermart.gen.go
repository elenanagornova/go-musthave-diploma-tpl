// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// GetUserBalanceResponse defines model for GetUserBalanceResponse.
type GetUserBalanceResponse struct {
	Current   float32 `json:"current"`
	Withdrawn float32 `json:"withdrawn"`
}

// GetUserOrdersResponse defines model for GetUserOrdersResponse.
type GetUserOrdersResponse []Order

// Order defines model for Order.
type Order struct {
	Accrual    *float32 `json:"accrual,omitempty"`
	Number     string   `json:"number"`
	Status     string   `json:"status"`
	UploadedAt string   `json:"uploaded_at"`
}

// UserBalanceWithdrawRequest defines model for UserBalanceWithdrawRequest.
type UserBalanceWithdrawRequest struct {
	Order string  `json:"order"`
	Sum   float32 `json:"sum"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// UserOrdersRequest defines model for UserOrdersRequest.
type UserOrdersRequest string

// UserRegisterRequest defines model for UserRegisterRequest.
type UserRegisterRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// UserBalanceWithdrawJSONBody defines parameters for UserBalanceWithdraw.
type UserBalanceWithdrawJSONBody UserBalanceWithdrawRequest

// UserLoginJSONBody defines parameters for UserLogin.
type UserLoginJSONBody UserLoginRequest

// UserOrderJSONBody defines parameters for UserOrder.
type UserOrderJSONBody UserOrdersRequest

// UserRegisterJSONBody defines parameters for UserRegister.
type UserRegisterJSONBody UserRegisterRequest

// UserBalanceWithdrawJSONRequestBody defines body for UserBalanceWithdraw for application/json ContentType.
type UserBalanceWithdrawJSONRequestBody UserBalanceWithdrawJSONBody

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody UserLoginJSONBody

// UserOrderJSONRequestBody defines body for UserOrder for application/json ContentType.
type UserOrderJSONRequestBody UserOrderJSONBody

// UserRegisterJSONRequestBody defines body for UserRegister for application/json ContentType.
type UserRegisterJSONRequestBody UserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение текущего баланса пользователя
	// (GET /api/user/balance)
	UserBalance(w http.ResponseWriter, r *http.Request)
	// Запрос на списание средств
	// (POST /api/user/balance/withdraw)
	UserBalanceWithdraw(w http.ResponseWriter, r *http.Request)
	// Получение информации о выводе средств
	// (GET /api/user/balance/withdrawals)
	UserWithdrawals(w http.ResponseWriter, r *http.Request)
	// Аутентификация пользователя
	// (POST /api/user/login)
	UserLogin(w http.ResponseWriter, r *http.Request)
	// Получение списка заказов
	// (GET /api/user/orders)
	UserOrders(w http.ResponseWriter, r *http.Request)
	// Загрузка номера заказа
	// (POST /api/user/orders)
	UserOrder(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя
	// (POST /api/user/register)
	UserRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// UserBalance operation middleware
func (siw *ServerInterfaceWrapper) UserBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserBalance(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserBalanceWithdraw operation middleware
func (siw *ServerInterfaceWrapper) UserBalanceWithdraw(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserBalanceWithdraw(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserWithdrawals operation middleware
func (siw *ServerInterfaceWrapper) UserWithdrawals(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserWithdrawals(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserOrders operation middleware
func (siw *ServerInterfaceWrapper) UserOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserOrders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserOrder operation middleware
func (siw *ServerInterfaceWrapper) UserOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRegister(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/balance", wrapper.UserBalance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/balance/withdraw", wrapper.UserBalanceWithdraw)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/balance/withdrawals", wrapper.UserWithdrawals)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.UserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/orders", wrapper.UserOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/orders", wrapper.UserOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.UserRegister)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXT2vjRhT/KmLao4mVNIWtj3tZCguBQNnDEsrEnthaZEk7M9oQgsCxt90taXF72mP7",
	"ERQnbtQkcr7Cm29U3ozkSLbluCZuWXqyNW/e/9/83swpafrdwPeYJwVpnBLOROB7gumPF0x+Jxh/Tl3q",
	"Ndl+JkJJ0/ck8yT+pUHgOk0qHd+rvxG+h2ui2WFdiv++5OyINMgX9Qc3dSMV9QrzURRFtdz3Hm8xLjbl",
	"esZ6ZFxnm5ZXIOB+wLh0TKWaIedZUN3QlU7gsr0j0rC37O0akScBIw3ihd1DxklUI8eO7LQ4PfZW2h/V",
	"CGdvQ4ezFmm8nroqmjmYKvmHb1hTkmUFdCTriscKpNXQTGaXck5P8NsI5gpAm00eUnfFAmT/Gqe5SEju",
	"eG0UCUllKBaKwsD1aYu1vqdygXymTJmLqcGy+qKCFRr9KqvsPnsbMiHn0/XzKszHH3bX6aoxaNSrgnvp",
	"tx2vMiQXpQtDCqgQxz5vPV40Y6OgURVKjqppLHNOcdc+aztC4u9/GzOqON6Rr4050kXZCz/oMN6lXFo0",
	"cEiNvGNcOMghZHvL3rIxCD9gHgob5Cu9hE5kR0dep4FTDwXj9UMDGVxsM50jZqhJ6dsWaRRhRWplft2x",
	"7apzON1XyZI1smPvonqLiSZ3AmmChxTGqm/BFcSQQqrO1Q/4cauGFkxUH0Yohhj1d+3tBfr3MIFb9TNc",
	"wwRGEKs+jPHbQsMWxDBSfZioHiT5DkjR2NcmlxljI0jVQPVVD8Y6mqEJ4yMkcAE3EFvqDMaqp6PqYVTm",
	"BHUpP0H133UsA/VBqycwtnQ4N2qgfoIxXMLEgguI4RajUGcQWxXhD0mNSNoWCBj47UGDHKDHuWbWc2rV",
	"kPXF8rbmbEEMMJmQz/3WyZPNqiW8FJUPg+QhixZjrNwXNVBncA9j9RFSiHVP4AIbABcaJNgZuIYY7lUP",
	"JljYJ8fLrr2zELwICey36quBtgFXGAFiVhv6AClMcA9C6koLRtrezmJ74wxbqTqHvyz1Xsdyh8bQ+gTu",
	"DPJMujcQ4+/G8PzpoaRWlivcQ4IFzvFdTmw91FJXLKWjV4V9i+HyCHBXuFoVfBTuV7UnAeJS4kshQStX",
	"uruXGivFGqvh50p9kEBawO+PkOhMLRipcxjplNfEz3QMV1Pdy2zKborgSnebKOO1x2issmElWE0siLET",
	"WEjVh0S9hwSrh4gq8pH9j/ljRYYsGDEYv4fYcM6thmgCaT1b0+lsDFO/zpYBdXQphisNzj/0zE0QW2g+",
	"10xmz0YmmYWZvuMWmamcXZtJi7quhXutbG9tART3ctHad6nZZ9//9CqV8+JNefxNyrzxKReoc3KAN/NK",
	"jtjL3jCb4ojyo2Pdu8/D1C/NfEsN4E9sy4U6h1sjulQ9swqppX7BQwN3FQcFxnBngLRT4XKkCaTKu+aR",
	"RLe1b8Fobg6qwYZJ6hGsrkKg3zxZseFKf1yuUPDP5t5n8rs2p60ygsqDV2JSnj2sl8/s/Pm9wSM5+8Jf",
	"+1CuOsmv9ZgsjqECDM0o+tdm/SK8Tyf6FOLX+s41VP2NoatiLG9moKNrxt/pQf76lITcJQ3SkTIQjXrd",
	"9ZvU7fhCNp7Zz2wSHUR/BwAA///EgcU3YBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
